%option yylineno
%{
# include "grammar.tab.h"
%}


%option noyywrap

DIGIT 		    [0-9] 
NUMBER          [1-9][0-9]*|0
INTEGER         [+-]?NUMBER
FLOAT           [+-]?NUMBER.NUMBER
STRING          [a-zA-Z_0-9]+
ID              [a-zA-Z_][a-zA-Z_0-9]* 
BOOLEAN         true|false
%% 

{DIGIT}+ 	printf( "An integer: %s (%d)\n", yytext, atoi( yytext ) ); 

{DIGIT}+"."{DIGIT}*  printf( "A float: %s (%g)\n", yytext, atof( yytext ) );  

"if"|"then"|"else"|"program"|"let"|"const"|"while"|"read"|"print"|"len"|"sin"  printf( "A keyword: %s\n", yytext );  

{ID} 		printf( "An identifier: %s\n", yytext ); 

"+"|"-"|"*"|"/"|"="|">="|"<="|">"|"<"|"|"|"&"|"%"|"=="|"!="|"+="|"-="|"*="|"/="|"%="|"&="|"|=" printf( "An operator: %s\n", yytext ); 

"("|")"|"["|"]"|"{"|"}"|":"|";"|"," printf( "A separator: %s\n", yytext );

"{"[^}\n]*"}" 		/* eat up one-line comments */ 

[ \t\n\r]+ 		/* eat up whitespace */ 
		 
. printf("Eroare\n");
%% 
main( argc, argv ) 
int argc; 
char **argv; 
{ 
    ++argv, --argc; /* skip over program name */ 
    if ( argc > 0 ) 
    yyin = fopen( argv[0], "r" ); 
    else 
     yyin = stdin; 
    yylex(); 
} 
