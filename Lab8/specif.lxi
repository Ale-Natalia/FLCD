%option yylineno
%{
# include "grammar.tab.h"
%}

%option noyywrap

DIGIT 		[0-9] 
NUMBER          [1-9][0-9]*|0
INTEGER         [+-]?NUMBER
FLOAT           [+-]?NUMBER.NUMBER
STRING          [a-zA-Z_0-9]+
ID      [a-zA-Z_][a-zA-Z_0-9]* 
BOOLEAN         true|false

%% 

"program" {return program;} 
"let" {return let;} 
"const" {return const;} 
"if" {return if;} 
"then" {return then;} 
"else" {return else;} 
"while" {return while;} 
"read" {return read;} 
"len" {return len;} 
"sin" {return sin;} 
"print" {return print;}

{INTEGER} {return INTEGER;}
{FLOAT} {return FLOAT;}
{STRING} {return STRING;}
{BOOLEAN} {return BOOLEAN;}
{ID} {return id;}

"+" {return op_plus;} 
"-" {return op_minus;}
"*" {return op_mul;} 
"/" {return op_div;}
"=" {return op_eq;} 
">=" {return op_gte;} 
"<=" {return op_lte;} 
">" {return op_gt;}
"<" {return op_lt;}
"|" {return op_or;} 
"=" {return op_and;}
"%" {return op_mod;} 
"==" {return op_eqeq;}
"!=" {return op_dif;}
"+=" {return op_pluseq;}
"-=" {return op_minuseq;}
"*=" {return op_muleq;} 
"/=" {return op_diveq;} 
"%=" {return op_modeq;} 
"&=" {return op_andeq;} 
"|=" {return op_oreq;}

"(" {return sep_open_par;}
")" {return sep_closed_par;}
"[" {return sep_open_br;}
"]" {return sep_closed_br;}
"{" {return sep_open_curl;} 
"}" {return sep_closed_curl;}
":" {return sep_col;}
";" {return sep_semicol;}
"," {return sep_com;}

[ \t\n\r]+ 		{}
		 
. {printf("%s unknown character\n", yytext); exit(0);}

%% 

int yywrap() {
    return 1;
}
